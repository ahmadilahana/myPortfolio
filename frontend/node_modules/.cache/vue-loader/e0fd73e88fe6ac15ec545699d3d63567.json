{"remainingRequest":"D:\\project\\myPortofolio\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\project\\myPortofolio\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\project\\myPortofolio\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\project\\myPortofolio\\frontend\\src\\views\\client\\home.vue?vue&type=template&id=10fb620e&","dependencies":[{"path":"D:\\project\\myPortofolio\\frontend\\src\\views\\client\\home.vue","mtime":1638898931572},{"path":"D:\\project\\myPortofolio\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\project\\myPortofolio\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\project\\myPortofolio\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\project\\myPortofolio\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}